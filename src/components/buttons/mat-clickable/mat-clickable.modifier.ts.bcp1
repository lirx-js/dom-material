import { IObservableLike, toObservable } from '@lirx/core';
import { createVirtualReactiveElementNodeModifier, VirtualDOMNode, VirtualReactiveElementNode } from '@lirx/dom';
import { IMatIconButtonOptions } from '../mat-icon-button/mat-icon-button.modifier';

export interface IMatClickableOnClickFunction {
  (
    event: MouseEvent,
  ): void;
}

export interface IMatClickableOptions {
  readonly replaceElement?: boolean;
  readonly href?: string;
  readonly onClick?: IMatClickableOnClickFunction;
}

export function matClickableModifierFunction(
  node: VirtualReactiveElementNode<any>,
  options?: IObservableLike<IMatClickableOptions>,
  {
    replaceElement = true,
    href,
    onClick,
  }: IMatClickableOptions = {},
): VirtualDOMNode {
  const options$ = toObservable(options);

  let element: Element = node.elementNode;

  if (href) {
    if (element instanceof HTMLAnchorElement) {
      element.href = href;
    } else if (replaceElement) {
      node = VirtualReactiveElementNode.createHTML('a');
      element = node.elementNode;
      (element as HTMLAnchorElement).href = href;
    }
  }

  if (onClick) {
    node.on$<MouseEvent>('click')(onClick);
  }

  node.setClass('mat-clickable', true);

  return node;
}

export const MAT_CLICKABLE_MODIFIER = createVirtualReactiveElementNodeModifier<IMatClickableOptions | undefined, VirtualDOMNode>('mat-clickable', matClickableModifierFunction);


